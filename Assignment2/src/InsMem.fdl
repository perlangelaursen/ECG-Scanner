ipblock instmem(in address : ns(5);
				in wr, rd : ns(1);
				in idata : ns(32);
				out odata : ns(32)) 
{
	iptype "ram";
	ipparm "size=64";
	ipparm "wl=32";
	ipparm "file=program.txt";
}

dp InsMem(in address : ns(5);
		  out instruction : ns(32)) 
{
	sig wr, rd : ns(1);
	sig idata : ns(32);
	sig odata : ns(32);
	use instmem(address, wr, rd, idata, odata);

	always {
		wr = 0;
		rd = 1;
		idata = 0;
		instruction = odata;
	}
}

dp testInsMem(out address: ns(5);
			  in instruction : ns(32)) {
	always {
		$display($dec, "Cycle: ", $cycle, " Address: ", address, " Instruction: ", $bin, instruction);
	}
	sfg test_0{address = 1;}
	sfg test_1{address = 2;}
	sfg test_2{address = 3;}
	sfg test_3{address = 4;}
	sfg test_4{address = 5;}
	sfg test_5{address = 6;}
}

fsm f_testbench(testInsMem) {
	initial s0;
	state s1, s2, s3, s4, s5;
	@s0 (test_0) -> s1;
	@s1 (test_1) -> s2;
	@s2 (test_2) -> s3;
	@s3 (test_3) -> s4;
	@s4 (test_4) -> s5;
	@s5 (test_5) -> s0;
}

system InsMemSystem {
	InsMem(address, instruction);
	testInsMem(address, instruction);
}