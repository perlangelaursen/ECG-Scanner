ipblock instmem(in address : ns(5);
        in wr, rd : ns(1);
        in idata : ns(32);
        out odata : ns(32)) 
{
  iptype "ram";
  ipparm "size=64";
  ipparm "wl=32";
  ipparm "file=program.txt";
}

dp InsMem(in address : ns(5);
      out instruction : ns(32)) 
{
  sig wr, rd : ns(1);
  sig idata : ns(32);
  sig odata : ns(32);
  use instmem(address, wr, rd, idata, odata);

  always {
    wr = 0;
    rd = 1;
    idata = 0;
    instruction = odata;
  }
}

dp Control (
  in instruction  : ns(32);
  out branch      : ns(1);
  out bneg        : ns(1);
  out bzero       : ns(1);
  out Select      : ns(4); //SUB, ADD ADDI, BNEG, BZERO, SHIFTLEFT, SHIFTRIGHT, AND, OR
  out inputSource : ns(1);
  out storeenable : ns(1);
  out storesel    : ns(3)
){
  sig operation : ns(6);

  always {
    operation = instruction[31:26];

    Select    = (operation == 0b000001) ? 0b0001 : // ADDI
                (operation == 0b000010) ? 0b0010 : // SUB
                (operation == 0b000011) ? 0b0001 : // ADD
                (operation == 0b000100) ? 0b0011 : // BNEG
                (operation == 0b000110) ? 0b0110 : // BZERO
                (operation == 0b000111) ? 0b0111 : // SHIFTLEFT
                (operation == 0b001000) ? 0b1000 : // SHIFTRIGHT
                (operation == 0b001001) ? 0b1001 : // AND
                (operation == 0b001010) ? 0b1010 : // OR
                0b0000;

    inputSource = (operation == 0b000001) ? 0b1 : 0b0;
    branch    = (operation == 0b000101) ? 0b1 : 0b0;
    bneg      = (operation == 0b000100) ? 0b1 : 0b0;
    bzero     = (operation == 0b000110) ? 0b1 : 0b0;

    storeenable = (operation == 0b000001) ? 0b1 :
                (operation == 0b000010) ? 0b1 :
                (operation == 0b000011) ? 0b1 :
                0b0;

    storesel   = (operation == 0b000001) ? 0b0 :
                (operation == 0b000000) ? 0b0 :
                0b1;
  }
}

dp ALU(
  in A, B : tc(32);
  in Select : ns(4);
  out R : tc(32);
  out N, Z : ns(1)
  ) {

  always {
    R = (Select == 0b0001) ? A + B :
      (Select == 0b0010) ? A - B :
      (Select == 0b0111) ? A << B:
      (Select == 0b1000) ? A >> B:
      (Select == 0b1001) ? A & B:
      (Select == 0b1010) ? A | B:
      0
    N = R[31];
    Z = R == 0;
  }
}

dp Register(
  in asel, bsel, storesel : ns(3);
  in storeenable : ns(1);
  in storedata : tc(32);
  out a, b : tc(32)
  ) {

  reg r0, r1, r2, r3, r4, r5, r6, r7 : ns(32);

  always {
    a = asel == 1 ? r1 :
      asel == 2 ? r2 :
      asel == 3 ? r3 :
      asel == 4 ? r4 :
      asel == 5 ? r5 :
      asel == 6 ? r6 :
      asel == 7 ? r7 : 0;

    b = bsel == 1 ? r1 :
      bsel == 2 ? r2 :
      bsel == 3 ? r3 :
      bsel == 4 ? r4 :
      bsel == 5 ? r5 :
      bsel == 6 ? r6 :
      bsel == 7 ? r7 : 0;

    r1 = storeenable ? storesel == 1 ? storedata : r1 : r1;
    r2 = storeenable ? storesel == 2 ? storedata : r2 : r2;
    r3 = storeenable ? storesel == 3 ? storedata : r3 : r3;
    r4 = storeenable ? storesel == 4 ? storedata : r4 : r4;
    r5 = storeenable ? storesel == 5 ? storedata : r5 : r5;
    r6 = storeenable ? storesel == 6 ? storedata : r6 : r6;
    r7 = storeenable ? storesel == 7 ? storedata : r7 : r7;
  }
}

dp And(in a, b : ns(1);
  out result : ns(1)) {
  always {
    result = (a & b) ? 0b1 : 0b0;
  }
}

dp Or(in a, b : ns(1);
  out result : ns(1)) {
  always {
    result = (a | b) ? 0b1 : 0b0;
  }
}