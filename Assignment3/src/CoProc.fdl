dp CoProc(in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1) // true if the slave is currently busy (with handshaking) and cannot receive new data.)
   ) {
   reg stallr : ns(1);
   reg reg1, reg2, reg3, reg4, reg5, reg6, reg7, reg8, reg9, reg10 : tc(32);
   reg reg11, reg12, reg13, reg14, reg15, reg16, reg17, reg18, reg19, reg20 : tc(32);
   reg reg21, reg22, reg23, reg24, reg25, reg26, reg27, reg28, reg29, reg30 : tc(32);
   reg reg31, reg32 : tc(32);

   always {
         reg1 = (stall == 0 & cmd[27] == 0) ? datain : reg1;
         reg2 = (stall == 0 & cmd[27] == 0) ? reg1 : reg2;
         reg3 = (stall == 0 & cmd[27] == 0) ? reg2 : reg3;
         reg4 = (stall == 0 & cmd[27] == 0) ? reg3 : reg4;
         reg5 = (stall == 0 & cmd[27] == 0) ? reg4 : reg5;
         reg6 = (stall == 0 & cmd[27] == 0) ? reg5 : reg6;
         reg7 = (stall == 0 & cmd[27] == 0) ? reg6 : reg7;
         reg8 = (stall == 0 & cmd[27] == 0) ? reg7 : reg8;
         reg9 = (stall == 0 & cmd[27] == 0) ? reg8 : reg9;
         reg10 = (stall == 0 & cmd[27] == 0) ? reg9 : reg10;
         reg11 = (stall == 0 & cmd[27] == 0) ? reg10 : reg11;
         reg12 = (stall == 0 & cmd[27] == 0) ? reg11 : reg12;
         reg13 = (stall == 0 & cmd[27] == 0) ? reg12 : reg13;
         reg14 = (stall == 0 & cmd[27] == 0) ? reg13 : reg14;
         reg15 = (stall == 0 & cmd[27] == 0) ? reg14 : reg15;
         reg16 = (stall == 0 & cmd[27] == 0) ? reg15 : reg16;
         reg17 = (stall == 0 & cmd[27] == 0) ? reg16 : reg17;
         reg18 = (stall == 0 & cmd[27] == 0) ? reg17 : reg18;
         reg19 = (stall == 0 & cmd[27] == 0) ? reg18 : reg19;
         reg20 = (stall == 0 & cmd[27] == 0) ? reg19 : reg20;
         reg21 = (stall == 0 & cmd[27] == 0) ? reg20 : reg21;
         reg22 = (stall == 0 & cmd[27] == 0) ? reg21 : reg22;
         reg23 = (stall == 0 & cmd[27] == 0) ? reg22 : reg23;
         reg24 = (stall == 0 & cmd[27] == 0) ? reg23 : reg24;
         reg25 = (stall == 0 & cmd[27] == 0) ? reg24 : reg25;
         reg26 = (stall == 0 & cmd[27] == 0) ? reg25 : reg26;
         reg27 = (stall == 0 & cmd[27] == 0) ? reg26 : reg27;
         reg28 = (stall == 0 & cmd[27] == 0) ? reg27 : reg28;
         reg29 = (stall == 0 & cmd[27] == 0) ? reg28 : reg29;
         reg30 = (stall == 0 & cmd[27] == 0) ? reg29 : reg30;
         reg31 = (stall == 0 & cmd[27] == 0) ? reg30 : reg31;
         reg32 = (stall == 0 & cmd[27] == 0) ? reg31 : reg32;

         dataout = (stall == 0 & cmd[27] == 1) ? ((reg1 + reg2 + reg3 + reg4 + reg5 + 
                                                   reg6 + reg6 + reg7 + reg8 + reg9 + 
                                                   reg10 + reg11 + reg12 + reg13 + reg14 +
                                                   reg15 + reg16 + reg17 + reg18 + reg19 +
                                                   reg20 + reg21 + reg22 + reg23 + reg24 +
                                                   reg25 + reg26 + reg27 + reg28 + reg29 +
                                                   reg30 + reg31 + reg32) >> 5) : 0;

         dataoutrdy = (stall == 0 & cmd[27] == 1) ? 0b1 : 0b0;
   }
}

dp testCoProc(out datain : ns(32);
   out cmd : ns(32);
   out datainrdy : ns(1);
   in dataout : ns(32);
   in dataoutrdy : ns(1);
   out stall : ns(1)) {
   always {
      $display($dec, "Cycle: ", $cycle);
      $display($bin, "Cmd: ", cmd);
      $display($dec, "dataout: ", dataout);
      $display($dec, "datain: ", datain);
      $display($bin, "datainrdy: ", datainrdy);
      $display($bin, "dataoutrdy: ", dataoutrdy);
      $display($bin, "stall: ", stall);
      $display(" ");
   }

   sfg testLoad {cmd = 0b01000000000000000000000000000000;
                  datain = 128;
                  datainrdy = 1;
                  stall = 0;}

   sfg testExec {cmd = 0b01001000000000000000000000000000;
                  datain = 0;
                  datainrdy = 1;
                  stall = 0;}

   sfg testStall {cmd = 0b00000000000000000000000000000000;
                  datain = 0;
                  datainrdy = 0;
                  stall = 1;}

   sfg testReload {cmd = 0b01000000000000000000000000000000;
                  datain = 32;
                  datainrdy = 1;
                  stall = 0;}
}

fsm f_testbench(testCoProc) {
   initial s0;
   state s1, s2, s3;
   @s0 (testLoad) -> s1;
   @s1 (testExec) -> s2;
   @s2 (testStall) -> s3;
   @s3 (testReload) -> s1;
}

system coProcSystem {
   CoProc(datain, cmd, datainrdy, dataout, dataoutrdy, stall);
   testCoProc(datain, cmd, datainrdy, dataout, dataoutrdy, stall);
}