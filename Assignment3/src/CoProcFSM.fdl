dp CoProc(in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1) // true if the slave is currently busy (with handshaking) and cannot receive new data.)
   ) {
   reg stallr : ns(1);
   reg cmdr : ns(32);
   reg datainrdyr : ns(1);
   reg dataoutr, datainr : ns(32);
   reg reg1, reg2, reg3, reg4, reg5, reg6, reg7, reg8, reg9, reg10 : tc(32);
   reg reg11, reg12, reg13, reg14, reg15, reg16, reg17, reg18, reg19, reg20 : tc(32);
   reg reg21, reg22, reg23, reg24, reg25, reg26, reg27, reg28, reg29, reg30 : tc(32);
   reg reg31, reg32 : tc(32);

   always {
         $display("stallr: ", stallr);
         $display("datainrdyr: ", datainrdyr);
         $display("cmdr: ", cmdr);
         $display($dec, "datainr: ", datainr);
         $display($dec, "reg1: ", reg1);
         $display($dec, "reg2: ", reg2);
         stallr = stall;
         cmdr = cmd;
   }

   sfg captureData{
       dataoutrdy = 1; 
       dataout = 0;
       datainrdyr = datainrdy;
       datainr = datain;
   }

   sfg Load{
      reg1 = datainr;
      reg2 = reg1;
      reg3 = reg2;
      reg4 = reg3;
      reg5 = reg4;
      reg6 = reg5;
      reg7 = reg6;
      reg8 = reg7;
      reg9 = reg8;
      reg10 = reg9;
      reg11 = reg10;
      reg12 = reg11;
      reg13 = reg12;
      reg14 = reg13;
      reg15 = reg14;
      reg16 = reg15;
      reg17 = reg16;
      reg18 = reg17;
      reg19 = reg18;
      reg20 = reg19;
      reg21 = reg20;
      reg22 = reg21;
      reg23 = reg22;
      reg24 = reg23;
      reg25 = reg24;
      reg26 = reg25;
      reg27 = reg26;
      reg28 = reg27;
      reg29 = reg28;
      reg30 = reg29;
      reg31 = reg30;
      reg32 = reg31;
      dataout = 0;
      dataoutrdy = 1;
   } 

   sfg MWI {
      dataout = ((reg1 + reg2 + reg3 + reg4 + reg5 + reg6 + reg6 + reg7 + reg8 + reg9 + 
                  reg10 + reg11 + reg12 + reg13 + reg14 + reg15 + reg16 + reg17 + reg18 + reg19 +
                  reg20 + reg21 + reg22 + reg23 + reg24 + reg25 + reg26 + reg27 + reg28 + reg29 +
                  reg30 + reg31 + reg32) >> 5);
      dataoutrdy = 1;
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
      dataout = 0;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
     dataout = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0; 
       dataout = 0;
   }


}

fsm CoProcCntrl(CoProc) {
  initial s0;
  state s1;
   
  @s0 if (datainrdyr == 1 & stallr == 0 & cmdr[27] == 1) then (MWI) -> s0;
      else if (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) then (Load) -> s0;
      else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
      else (captureData) -> s0;
  @s1 if (stallr == 0) then (resetAndSignalRdy) -> s0;
      else (awaithandshake) -> s1;

}

dp testCoProc(out datain : ns(32);
   out cmd : ns(32);
   out datainrdy : ns(1);
   in dataout : ns(32);
   in dataoutrdy : ns(1);
   out stall : ns(1)) {
   always {
      $display($dec, "Cycle: ", $cycle);
      $display($bin, "Cmd: ", cmd);
      $display($dec, "dataout: ", dataout);
      $display($dec, "datain: ", datain);
      $display($bin, "datainrdy: ", datainrdy);
      $display($bin, "dataoutrdy: ", dataoutrdy);
      $display($bin, "stall: ", stall);
      $display(" ");
   }

   sfg testLoad {cmd = 0b01000000000000000000000000000000;
                  datain = 128;
                  datainrdy = 1;
                  stall = 0;}

   sfg testExec {cmd = 0b01001000000000000000000000000000;
                  datain = 0;
                  datainrdy = 1;
                  stall = 0;}

   sfg testStall {cmd = 0b00000000000000000000000000000000;
                  datain = 0;
                  datainrdy = 0;
                  stall = 1;}

   sfg testReload {cmd = 0b01000000000000000000000000000000;
                  datain = 32;
                  datainrdy = 1;
                  stall = 0;}
}

fsm f_testbench(testCoProc) {
   initial s0;
   state s1, s2, s3;
   @s0 (testLoad) -> s1;
   @s1 (testExec) -> s2;
   @s2 (testStall) -> s3;
   @s3 (testReload) -> s1;
}

system coProcSystem {
   CoProc(datain, cmd, datainrdy, dataout, dataoutrdy, stall);
   testCoProc(datain, cmd, datainrdy, dataout, dataoutrdy, stall);
}