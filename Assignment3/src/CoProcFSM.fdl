dp CoProc(
   in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1) // true if the slave is currently busy (with handshaking) and cannot receive new data.
   ){
   
   reg datainrdyr : ns(1);
   reg cmdr : ns(32);
   reg datainr : ns(32);
   reg dataoutr : ns(32);
   reg stallr : ns(1);
   reg reg1, reg2, reg3, reg4, reg5, reg6, reg7, reg8, reg9, reg10 : tc(32);
   reg reg11, reg12, reg13, reg14, reg15, reg16, reg17, reg18, reg19, reg20 : tc(32);
   reg reg21, reg22, reg23, reg24, reg25, reg26, reg27, reg28, reg29, reg30 : tc(32);
   reg reg31, reg32 : tc(32);

   $trace(stallr, "traces/CPStallr.seq");
   $trace(datainrdyr, "traces/CPdatainrdyr.seq");
   $trace(cmdr, "traces/CPcmdr.seq");
   $trace(reg1, "traces/CPreg1.seq");
   $trace(dataout, "traces/CPdataout.seq");
   
   always{
       stallr = stall;
       reg1 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? datainr : reg1;
       reg2 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg1 : reg2;
       reg3 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg2 : reg3;
       reg4 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg3 : reg4;
       reg5 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg4 : reg5;
       reg6 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg5 : reg6;
       reg7 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg6 : reg7;
       reg8 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg7 : reg8;
       reg9 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg8 : reg9;
       reg10 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg9 : reg10;
       reg11 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg10 : reg11;
       reg12 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg11 : reg12;
       reg13 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg12 : reg13;
       reg14 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg13 : reg14;
       reg15 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg14 : reg15;
       reg16 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg15 : reg16;
       reg17 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg16 : reg17;
       reg18 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg17 : reg18;
       reg19 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg18 : reg19;
       reg20 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg19 : reg20;
       reg21 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg20 : reg21;
       reg22 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg21 : reg22;
       reg23 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg22 : reg23;
       reg24 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg23 : reg24;
       reg25 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg24 : reg25;
       reg26 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg25 : reg26;
       reg27 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg26 : reg27;
       reg28 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg27 : reg28;
       reg29 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg28 : reg29;
       reg30 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg29 : reg30;
       reg31 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg30 : reg31;
       reg32 = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 0) ? reg31 : reg32;
       dataoutr = (datainrdyr == 1 & stallr == 0 & cmdr[27] == 1) ? ((reg1 + reg2 + reg3 + reg4 + reg5 + 
                                                   reg6 + reg6 + reg7 + reg8 + reg9 + 
                                                   reg10 + reg11 + reg12 + reg13 + reg14 +
                                                   reg15 + reg16 + reg17 + reg18 + reg19 +
                                                   reg20 + reg21 + reg22 + reg23 + reg24 +
                                                   reg25 + reg26 + reg27 + reg28 + reg29 +
                                                   reg30 + reg31 + reg32) >> 5) : dataoutr;
       dataout = dataoutr;
   }
   
   sfg captureData{
       dataoutrdy = 0; 
       datainrdyr = datainrdy;
       datainr = datain;
       cmdr = cmd;
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0; 
   }
   
}

fsm CoProc_cntrl(CoProc){
   initial s0;
   state s1;
   
   @s0 if (datainrdyr == 1 & stallr == 0) then (resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
       else (captureData) -> s0;
   @s1 if (stallr == 0) then (resetAndSignalRdy) -> s0;
       else (awaithandshake) -> s1;
       
}

dp testCoProc(out datain : ns(32);
   out cmd : ns(32);
   out datainrdy : ns(1);
   in dataout : ns(32);
   in dataoutrdy : ns(1);
   out stall : ns(1)) {
   always {
      $display($dec, "Cycle: ", $cycle);
      $display($bin, "Cmd: ", cmd);
      $display($dec, "dataout: ", dataout);
      $display($dec, "datain: ", datain);
      $display($bin, "datainrdy: ", datainrdy);
      $display($bin, "dataoutrdy: ", dataoutrdy);
      $display($bin, "stall: ", stall);
      $display(" ");
   }

   sfg testLoad {cmd = 0b01000000000000000000000000000000;
                  datain = 128;
                  datainrdy = 1;
                  stall = 0;}

   sfg testExec {cmd = 0b01001000000000000000000000000000;
                  datain = 0;
                  datainrdy = 1;
                  stall = 0;}

   sfg testStall {cmd = 0b00000000000000000000000000000000;
                  datain = 0;
                  datainrdy = 0;
                  stall = 1;}

   sfg testReload {cmd = 0b01000000000000000000000000000000;
                  datain = 32;
                  datainrdy = 1;
                  stall = 0;}
}

fsm f_testbench(testCoProc) {
   initial s0;
   state s1, s2, s3;
   @s0 (testLoad) -> s1;
   @s1 (testExec) -> s2;
   @s2 (testStall) -> s3;
   @s3 (testReload) -> s1;
}

system coProcSystem {
   CoProc(datain, cmd, datainrdy, dataout, dataoutrdy, stall);
   testCoProc(datain, cmd, datainrdy, dataout, dataoutrdy, stall);
}