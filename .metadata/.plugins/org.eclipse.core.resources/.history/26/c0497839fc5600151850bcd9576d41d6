#include <stdio.h>
#include <math.h>
#include "sensor.h"

// Filter function declerations
int lowPass();
int highPass();
int derivative();
int squaring();
int movingWindowIntegration();

// arrays
int x[13], y[10011], lowpass[33], highpass[5];
int n = 1, deri;

// Main program
int main(int argc, char *argv[]) {
	while((x[n % 33] = getNextData()) != -10) {
		lowPass();
		printf("%7d%7d%7d%7d%7d\n", n, x[n%33], y[n], x[(n-6)%33], y[n-1]);
		n++;
	}


	// End of program
	return 0;
}

// Filters here
int lowPass() {
	lowpass[n] = 2 * lowpass[n-1] - lowpass[n-2] + roundf(1.0 / 32.0 * (x[n%13] - 2 * x[(n-6)%13] + x[(n-12)%13]));
	return lowpass[n];
}

int highPass() {
	highpass[n] = highpass[n-1] - lowpass[n%33] / 32 + lowpass[(n-16)%33] - lowpass[(n-17)%33] + lowpass[(n-32)%33] / 32;
	return highpass[n];
}

int derivative() {
	deri = 1 / 8 * (2 * highpass[n%5] + highpass[(n-1)%5] - highpass[(n-3)%5] - 2 * highpass[(n-4)%5]);
	return deri;
}

int squaring() {
	y[n] *= y[n];
	return y[n];
}

int movingWindowIntegration() {
	int m = n % 32;

	int N = 30; // ????
	int buf = 0;

	for (int i = 1; i < N; i++) {
		buf += x[n-(N-i)];
	}


	y[n] = 1 / N * buf;
	return y[n];
}










